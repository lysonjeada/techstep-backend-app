# app/worker/tasks.py

# A importa√ß√£o para celery_app permanece como est√°, pois √© necess√°ria para o decorator @celery_app.task
from .celery_app import celery_app 
import traceback
import fitz # Importa√ß√£o para PyMuPDF, se estiver usando para extra√ß√£o de PDF
from openai import OpenAI
import os
# CORRE√á√ÉO AQUI: Ajuste o caminho de importa√ß√£o para extract_text_from_pdf
# Baseado em discuss√µes anteriores, ele est√° em app/llm_generation/services.py
from app.llm_generation.services import extract_text_from_pdf 
from dotenv import load_dotenv

load_dotenv()

# Mude o nome da inst√¢ncia do cliente OpenAI para evitar conflitos e deixar claro que √© para o Celery
celery_openai_client = OpenAI() 

@celery_app.task(name="app.worker.tasks.process_resume_feedback") # Nome da tarefa com caminho completo
def process_resume_feedback(resume_bytes: bytes) -> str:
    try:
        print("üì• Iniciando extra√ß√£o e an√°lise do curr√≠culo...")

        resume_text = extract_text_from_pdf(resume_bytes)
        if not resume_text.strip():
            return "‚ùå N√£o foi poss√≠vel extrair texto do PDF."

        print("üìÑ Primeiras palavras extra√≠das:", resume_text[:300], "...")

        prompt = (
            "Voc√™ √© um recrutador especializado em avalia√ß√£o de curr√≠culos. "
            "Analise o curr√≠culo abaixo e forne√ßa sugest√µes construtivas. "
            "Evite reescrever o curr√≠culo. Foque nos seguintes pontos:\n\n"
            "- Clareza e organiza√ß√£o\n"
            "- Uso de palavras-chave\n"
            "- Impacto e resultados mensur√°veis\n"
            "- Problemas de formata√ß√£o\n"
            "- Sugest√µes espec√≠ficas de melhoria\n\n"
            f"Curr√≠culo:\n{resume_text}"
        )

        print("üîç Enviando prompt para a OpenAI...")

        response = celery_openai_client.chat.completions.create( # Use a inst√¢ncia renomeada
            model="gpt-4",
            messages=[
                {"role": "system", "content": "Voc√™ √© um recrutador profissional experiente."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.5
        )

        feedback = response.choices[0].message.content.strip()
        print("‚úÖ Feedback retornado:", feedback[:300], "...")
        return feedback

    except Exception as e:
        traceback.print_exc()
        # √â importante levantar a exce√ß√£o para que o Celery marque a tarefa como falha
        # e o backend possa obter o status de falha.
        # Se voc√™ retornar uma string de erro, o Celery considerar√° a tarefa como bem-sucedida com essa string.
        raise e # Lan√ßa a exce√ß√£o para que o Celery a registre como falha
